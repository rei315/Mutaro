name: Test

on:
  workflow_dispatch

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
    
      - name: "install pip and dependencies"
        id: "install-pip"
        run: |
          curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
          python3 get-pip.py
          pip3 install requests
    
      - name: Run Ruby script
        id: ruby-script
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          package_files=$(find . -type f -name "Package.swift" -print)
          echo $package_files
          
          result=$(python3 ./.github/workflows/test.py $GH_TOKEN $package_files)
          if [ -z "$result" ] || [ "$result" = '[{}]' ]; then
            exit 0
          fi
          echo $result
          echo "result=${result}" >> $GITHUB_ENV

      - name: Setup and Remove related branch and pr
        id: setup-remove-branch-pr
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git fetch --prune --all
          git branch -r --format='%(refname:lstrip=3)' | grep '^swift-package/update-dependency/' > branches.txt || true
          
          if [[ -s branches.txt ]]; then
            while read -r branch; do
              git push origin --delete "$branch"
              branch_name=${branch#*/}
              hub api "/repos/:owner/:repo/pulls?state=open" | jq -r ".[] | select(.head.ref == \"$branch_name\") | .number" | xargs -I {} hub api -X DELETE "/repos/:owner/:repo/pulls/{}"
            done < branches.txt
          else
            echo "No branches found."
          fi

      - name: Create Branch and PR
        id: create-branch-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          current_datetime=$(date +"%Y-%m-%d-%H-%M")
          
          branchName="swift-package/update-dependency/${current_datetime}"
          
          git branch $branchName
          git switch $branchName
          git commit --allow-empty -m "Empty-Commit"
          git push --set-upstream origin $branchName
          
          pr_number=$(gh pr create --base develop --title "Update Swift Package Dependency" -l "Swift Package Update" --body "" | sed -n 's#.*https://github.com/[^/]\+/[^/]\+/pull/\([0-9]\+\).*#\1#p')
          echo "pull-request-number=${pr_number}" >> $GITHUB_ENV
          
      - name: Add comments to PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST_NUMBER: ${{ env.pull-request-number }}
          RESULT: ${{ env.result }}
        run: |
          for item in $(echo "$RESULT" | jq -c '.[]'); do
            currentVersion=$(echo "$item" | jq -r '.currentVersion')
            newVersion=$(echo "$item" | jq -r '.newVersion')
            repository=$(echo "$item" | jq -r '.repository')
            
            comment="CurrentVersion: $currentVersion<br>NewVersion: $newVersion<br>Repository: $repository"
            gh issue comment "${PULL_REQUEST_NUMBER}" -b "$comment"
          done
